// Generated by gencpp from file as_assignment/odomDataResult.msg
// DO NOT EDIT!


#ifndef AS_ASSIGNMENT_MESSAGE_ODOMDATARESULT_H
#define AS_ASSIGNMENT_MESSAGE_ODOMDATARESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace as_assignment
{
template <class ContainerAllocator>
struct odomDataResult_
{
  typedef odomDataResult_<ContainerAllocator> Type;

  odomDataResult_()
    : allValues()  {
    }
  odomDataResult_(const ContainerAllocator& _alloc)
    : allValues(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _allValues_type;
  _allValues_type allValues;





  typedef boost::shared_ptr< ::as_assignment::odomDataResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::as_assignment::odomDataResult_<ContainerAllocator> const> ConstPtr;

}; // struct odomDataResult_

typedef ::as_assignment::odomDataResult_<std::allocator<void> > odomDataResult;

typedef boost::shared_ptr< ::as_assignment::odomDataResult > odomDataResultPtr;
typedef boost::shared_ptr< ::as_assignment::odomDataResult const> odomDataResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::as_assignment::odomDataResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::as_assignment::odomDataResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::as_assignment::odomDataResult_<ContainerAllocator1> & lhs, const ::as_assignment::odomDataResult_<ContainerAllocator2> & rhs)
{
  return lhs.allValues == rhs.allValues;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::as_assignment::odomDataResult_<ContainerAllocator1> & lhs, const ::as_assignment::odomDataResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace as_assignment

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::as_assignment::odomDataResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::as_assignment::odomDataResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::as_assignment::odomDataResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::as_assignment::odomDataResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::as_assignment::odomDataResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::as_assignment::odomDataResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::as_assignment::odomDataResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fba7c61a9c778bd68f00b7397f54694c";
  }

  static const char* value(const ::as_assignment::odomDataResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfba7c61a9c778bd6ULL;
  static const uint64_t static_value2 = 0x8f00b7397f54694cULL;
};

template<class ContainerAllocator>
struct DataType< ::as_assignment::odomDataResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "as_assignment/odomDataResult";
  }

  static const char* value(const ::as_assignment::odomDataResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::as_assignment::odomDataResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#Result\n"
"float32[] allValues\n"
;
  }

  static const char* value(const ::as_assignment::odomDataResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::as_assignment::odomDataResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.allValues);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct odomDataResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::as_assignment::odomDataResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::as_assignment::odomDataResult_<ContainerAllocator>& v)
  {
    s << indent << "allValues[]" << std::endl;
    for (size_t i = 0; i < v.allValues.size(); ++i)
    {
      s << indent << "  allValues[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.allValues[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AS_ASSIGNMENT_MESSAGE_ODOMDATARESULT_H
