// Generated by gencpp from file compound_assignment/CustomServiceMessageRequest.msg
// DO NOT EDIT!


#ifndef COMPOUND_ASSIGNMENT_MESSAGE_CUSTOMSERVICEMESSAGEREQUEST_H
#define COMPOUND_ASSIGNMENT_MESSAGE_CUSTOMSERVICEMESSAGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/Int32.h>

namespace compound_assignment
{
template <class ContainerAllocator>
struct CustomServiceMessageRequest_
{
  typedef CustomServiceMessageRequest_<ContainerAllocator> Type;

  CustomServiceMessageRequest_()
    : shape()
    , side()  {
    }
  CustomServiceMessageRequest_(const ContainerAllocator& _alloc)
    : shape(_alloc)
    , side(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _shape_type;
  _shape_type shape;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _side_type;
  _side_type side;





  typedef boost::shared_ptr< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CustomServiceMessageRequest_

typedef ::compound_assignment::CustomServiceMessageRequest_<std::allocator<void> > CustomServiceMessageRequest;

typedef boost::shared_ptr< ::compound_assignment::CustomServiceMessageRequest > CustomServiceMessageRequestPtr;
typedef boost::shared_ptr< ::compound_assignment::CustomServiceMessageRequest const> CustomServiceMessageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator1> & lhs, const ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.shape == rhs.shape &&
    lhs.side == rhs.side;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator1> & lhs, const ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace compound_assignment

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e886955a85915c1c08925340140db219";
  }

  static const char* value(const ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe886955a85915c1cULL;
  static const uint64_t static_value2 = 0x08925340140db219ULL;
};

template<class ContainerAllocator>
struct DataType< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "compound_assignment/CustomServiceMessageRequest";
  }

  static const char* value(const ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String shape\n"
"std_msgs/Int32 side\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
;
  }

  static const char* value(const ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.shape);
      stream.next(m.side);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomServiceMessageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::compound_assignment::CustomServiceMessageRequest_<ContainerAllocator>& v)
  {
    s << indent << "shape: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.shape);
    s << indent << "side: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.side);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMPOUND_ASSIGNMENT_MESSAGE_CUSTOMSERVICEMESSAGEREQUEST_H
